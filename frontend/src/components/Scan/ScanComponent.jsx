import React, { useRef, useState } from "react";
import { UploadCloud, Camera, LocateFixed, ImagePlus, Bot } from "lucide-react";

const ScanComponent = () => {
  const fileInputRef = useRef(null);
  const videoRef = useRef(null);
  const [image, setImage] = useState(null);
  const [showCamera, setShowCamera] = useState(false);
  const [location, setLocation] = useState("");
  const [description, setDescription] = useState("");
  const [category, setCategory] = useState("");

  const categories = ["‡¶õ‡¶°‡¶º‡¶æ‡¶®‡ßã ‡¶Ü‡¶¨‡¶∞‡ßç‡¶ú‡¶®‡¶æ", "‡¶Ü‡¶¨‡¶∞‡ßç‡¶ú‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶§‡ßÇ‡¶™", "‡¶≠‡¶∞‡¶æ ‡¶°‡¶æ‡¶∏‡ßç‡¶ü‡¶¨‡¶ø‡¶®"];

  const openCamera = async () => {
    setShowCamera(true);
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: { exact: "environment" } }, // back camera
      });
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
      }
    } catch (err) {
      console.error("Camera error:", err);
      // fallback to front camera if back camera not available
      try {
        const fallbackStream = await navigator.mediaDevices.getUserMedia({
          video: true,
        });
        if (videoRef.current) {
          videoRef.current.srcObject = fallbackStream;
        }
      } catch (fallbackErr) {
        console.error("Fallback camera error:", fallbackErr);
      }
    }
  };

  const captureImage = () => {
    const canvas = document.createElement("canvas");
    canvas.width = videoRef.current.videoWidth;
    canvas.height = videoRef.current.videoHeight;
    const context = canvas.getContext("2d");
    context.drawImage(videoRef.current, 0, 0);
    const dataUrl = canvas.toDataURL("image/png");
    setImage(dataUrl);
    stopCamera();
  };

  const stopCamera = () => {
    const tracks = videoRef.current?.srcObject?.getTracks();
    tracks?.forEach((track) => track.stop());
    setShowCamera(false);
  };

  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) setImage(URL.createObjectURL(file));
  };

  const handleSubmit = () => {
    const data = { image, location, description, category };
    alert(JSON.stringify(data, null, 2));
  };

  const autoGenerateDescription = () => {
    const aiDescription = `This area looks ${category.toLowerCase()} and requires attention.`;
    setDescription(aiDescription);
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-white/10 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 mt-6 space-y-5 text-center">
      <h2 className="text-xl font-bold text-green-700">
        üå± ‡¶Ü‡¶ú‡¶á ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®, ‡¶Ü‡¶¨‡¶∞‡ßç‡¶ú‡¶®‡¶æ‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡ßã‡¶ï ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ!
      </h2>

      <div className="flex flex-wrap justify-center gap-2">
        {categories.map((cat) => (
          <button
            key={cat}
            onClick={() => setCategory(cat)}
            className={`px-4 py-2 rounded-full text-sm transition font-medium ${
              category === cat
                ? "bg-green-600 text-white shadow-lg"
                : "text-green-700 bg-white border border-green-500 hover:bg-green-100"
            }`}
          >
            {cat}
          </button>
        ))}
      </div>

      <div className="relative border-2 border-dashed border-green-300 rounded-xl h-72 flex items-center justify-center bg-green-50/40 shadow-inner overflow-hidden">
        {showCamera ? (
          <div className="relative w-full h-full">
            <video
              ref={videoRef}
              autoPlay
              playsInline
              className="w-full h-full object-cover rounded-xl"
            />
            <button
              onClick={captureImage}
              className="absolute bottom-4 left-1/2 -translate-x-1/2 bg-green-600 text-white px-4 py-2 rounded-full shadow-md"
            >
              Capture
            </button>
          </div>
        ) : image ? (
          <img
            src={image}
            alt="Captured"
            className="w-full h-full object-cover rounded-xl"
          />
        ) : (
          <div className="text-center space-y-2 text-green-800">
            <UploadCloud className="mx-auto h-8 w-8" />
            <p className="text-sm">Tap to open camera</p>
            <Camera
              className="mx-auto h-6 w-6 cursor-pointer text-green-600 hover:text-green-700"
              onClick={openCamera}
            />
            <p className="text-sm">or</p>
            <button
              onClick={() => fileInputRef.current.click()}
              className="underline font-semibold text-green-700"
            >
              <ImagePlus className="inline-block mr-1" /> Browse
            </button>
            <input
              type="file"
              accept="image/*"
              ref={fileInputRef}
              className="hidden"
              onChange={handleImageUpload}
            />
          </div>
        )}
      </div>

      <div className="space-y-3">
        <div className="relative">
          <input
            type="text"
            placeholder="Enter your location..."
            className="w-full border rounded-md px-4 py-2 pr-10 bg-white/80 focus:ring-2 focus:ring-green-400"
            value={location}
            onChange={(e) => setLocation(e.target.value)}
          />
          <LocateFixed className="absolute top-2.5 right-3 h-5 w-5 text-green-500" />
        </div>

        <div className="relative">
          <textarea
            rows={2}
            placeholder="Description..."
            className="w-full border rounded-md px-4 py-2 pr-10 bg-white/80 focus:ring-2 focus:ring-green-400"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
          <Bot
            className="absolute top-2.5 right-3 h-5 w-5 text-green-600 cursor-pointer"
            onClick={autoGenerateDescription}
            title="Auto-generate using AI"
          />
        </div>
      </div>

      <button
        className="w-full bg-gradient-to-r from-green-500 to-green-700 hover:from-green-600 hover:to-green-800 text-white py-2 rounded-xl font-semibold shadow-lg transition-all duration-200"
        onClick={handleSubmit}
      >
        üöÄ Send
      </button>
    </div>
  );
};

export default ScanComponent;
